# Generated by Django 5.1.7 on 2025-07-23 12:07

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="EmployeeModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("Service Advisor", "Service Advisor"),
                            ("Technician", "Technician"),
                            ("Representative", "Representative"),
                            ("Workshop Manager", "Workshop Manager"),
                            ("Account Staff", "Account Staff"),
                        ],
                        max_length=50,
                    ),
                ),
                ("full_name", models.CharField(max_length=255)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                ("address", models.TextField(blank=True, null=True)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True, null=True, upload_to="employee_profile_pictures"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("date_joined", models.DateField(auto_now_add=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "accounts_employeemodel",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CustomerFeedbackModel",
            fields=[
                (
                    "service_ticket",
                    models.IntegerField(blank=True, default=0, null=True),
                ),
                ("inspection_id", models.AutoField(primary_key=True, serialize=False)),
                ("customer_name", models.CharField(max_length=100)),
                ("vehicle_number", models.CharField(max_length=20)),
                ("vehicle_model", models.CharField(max_length=50)),
                ("vehicle_vin", models.CharField(max_length=50)),
                (
                    "rating",
                    models.IntegerField(
                        choices=[
                            (1, "Very Poor"),
                            (2, "Poor"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ]
                    ),
                ),
                ("feeback_notes", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "attachment",
                    models.FileField(
                        blank=True, null=True, upload_to="uploads/feedbacks/"
                    ),
                ),
            ],
            options={
                "db_table": "accounts_feedbackmodel",
            },
        ),
        migrations.CreateModel(
            name="InspectionModel",
            fields=[
                (
                    "service_ticket_id",
                    models.IntegerField(blank=True, default=0, null=True),
                ),
                ("inspection_id", models.AutoField(primary_key=True, serialize=False)),
                ("customer_name", models.CharField(max_length=100)),
                ("vehicle_number", models.CharField(max_length=20)),
                ("vehicle_model", models.CharField(max_length=50)),
                ("vehicle_vin", models.CharField(max_length=50)),
                ("inspection_notes", models.TextField()),
                ("acceptance_notes", models.TextField(blank=True, null=True)),
                (
                    "estimated_cost",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "attachment",
                    models.FileField(
                        blank=True, null=True, upload_to="uploads/inspections/"
                    ),
                ),
            ],
            options={
                "db_table": "accounts_inspectionmodel",
            },
        ),
        migrations.CreateModel(
            name="InvoiceModel",
            fields=[
                (
                    "service_ticket_id",
                    models.IntegerField(blank=True, default=0, null=True),
                ),
                ("invoice_id", models.AutoField(primary_key=True, serialize=False)),
                ("customer_name", models.CharField(max_length=100)),
                ("vehicle_number", models.CharField(max_length=20)),
                ("vehicle_model", models.CharField(max_length=50)),
                ("vehicle_vin", models.CharField(max_length=50)),
                (
                    "invoice_amount",
                    models.DecimalField(decimal_places=2, max_digits=10),
                ),
                ("invoice_details", models.TextField(blank=True, null=True)),
                ("customer_comments", models.TextField(blank=True, null=True)),
                (
                    "attachment",
                    models.FileField(
                        blank=True, null=True, upload_to="uploads/invoices/"
                    ),
                ),
            ],
            options={
                "db_table": "accounts_invoicemodel",
            },
        ),
        migrations.CreateModel(
            name="CustomUserProfile",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=15, null=True),
                ),
                ("address", models.TextField(blank=True, null=True)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                (
                    "profile_picture",
                    models.ImageField(
                        blank=True, null=True, upload_to="user_profile_pictures"
                    ),
                ),
            ],
            options={
                "db_table": "accounts_customuserprofile",
            },
        ),
        migrations.CreateModel(
            name="ServiceTicketModel",
            fields=[
                (
                    "service_ticket_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("customer_name", models.CharField(max_length=255)),
                ("customer_mobile_number", models.CharField(max_length=15)),
                ("customer_address", models.TextField()),
                ("customer_email", models.EmailField(max_length=254)),
                ("chassis_number", models.CharField(max_length=50)),
                ("reg_no", models.CharField(blank=True, max_length=20, null=True)),
                ("make", models.CharField(blank=True, max_length=50, null=True)),
                ("model", models.CharField(blank=True, max_length=50, null=True)),
                ("year", models.PositiveIntegerField(blank=True, null=True)),
                ("vin", models.CharField(blank=True, max_length=17, null=True)),
                ("colour", models.CharField(blank=True, max_length=50, null=True)),
                ("mileage", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "trans",
                    models.CharField(
                        blank=True,
                        choices=[("Auto", "Automatic"), ("Manual", "Manual")],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("Yearly", "Yearly"),
                            ("Monthly", "Monthly"),
                            ("Quarterly", "Quarterly"),
                        ],
                        max_length=50,
                    ),
                ),
                ("checkin_on", models.DateTimeField(default=django.utils.timezone.now)),
                ("complaints", models.TextField(blank=True, null=True)),
                ("description", models.TextField(blank=True, null=True)),
                (
                    "image",
                    models.ImageField(
                        blank=True, null=True, upload_to="uploads/images/"
                    ),
                ),
                (
                    "document",
                    models.FileField(
                        blank=True, null=True, upload_to="uploads/documents/"
                    ),
                ),
                (
                    "video",
                    models.FileField(
                        blank=True, null=True, upload_to="uploads/videos/"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Created", "Created"),
                            ("Estimation", "Estimation"),
                            (
                                "Waiting for Customer approval",
                                "Waiting for Customer approval",
                            ),
                            ("Customer Rejected", "Customer Rejected"),
                            ("Estimation Approved", "Estimation Approved"),
                            ("Checking with Customer", "Checking with Customer"),
                            ("Service in progress", "Service in progress"),
                            ("QA Check", "QA Check"),
                            ("Ready for delivery", "Ready for delivery"),
                            ("Customer query", "Customer query"),
                            ("Query resolved", "Query resolved"),
                            ("Waiting for payment", "Waiting for payment"),
                            ("Invoice Paid", "Invoice Paid"),
                            (
                                "Waiting for Customer feedback",
                                "Waiting for Customer feedback",
                            ),
                            ("Resolved", "Resolved"),
                        ],
                        default="",
                        max_length=50,
                    ),
                ),
                (
                    "previous_status",
                    models.CharField(
                        choices=[
                            ("Created", "Created"),
                            ("Estimation", "Estimation"),
                            (
                                "Waiting for Customer approval",
                                "Waiting for Customer approval",
                            ),
                            ("Customer Rejected", "Customer Rejected"),
                            ("Estimation Approved", "Estimation Approved"),
                            ("Checking with Customer", "Checking with Customer"),
                            ("Service in progress", "Service in progress"),
                            ("QA Check", "QA Check"),
                            ("Ready for delivery", "Ready for delivery"),
                            ("Customer query", "Customer query"),
                            ("Query resolved", "Query resolved"),
                            ("Waiting for payment", "Waiting for payment"),
                            ("Invoice Paid", "Invoice Paid"),
                            (
                                "Waiting for Customer feedback",
                                "Waiting for Customer feedback",
                            ),
                            ("Resolved", "Resolved"),
                        ],
                        default="",
                        max_length=50,
                    ),
                ),
                (
                    "fuel_level",
                    models.CharField(
                        choices=[
                            ("E", "Empty"),
                            ("1/4", "1/4"),
                            ("1/2", "1/2"),
                            ("3/4", "3/4"),
                            ("Full", "Full"),
                        ],
                        max_length=10,
                    ),
                ),
                ("spare_wheel", models.BooleanField(default=False)),
                ("jack", models.BooleanField(default=False)),
                ("tool_kit", models.BooleanField(default=False)),
                ("any_warning_light_on", models.BooleanField(default=False)),
                ("delivery_due_date", models.DateField(blank=True, null=True)),
                (
                    "estimated_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "estimation_customer_confirmation",
                    models.BooleanField(default=False),
                ),
                ("inspection_id", models.IntegerField(blank=True, null=True)),
                (
                    "invoice_amount",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("invoice_customer_confirmation", models.BooleanField(default=False)),
                ("invoice_id", models.IntegerField(blank=True, null=True)),
                ("customer_feedback_text", models.TextField(blank=True, null=True)),
                (
                    "customer_feedback_num",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Very Poor"),
                            (2, "Poor"),
                            (3, "Average"),
                            (4, "Good"),
                            (5, "Excellent"),
                        ],
                        null=True,
                    ),
                ),
                ("history_log", models.TextField(blank=True, default="", null=True)),
                (
                    "inspection_notes",
                    models.TextField(blank=True, default="NA", null=True),
                ),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assigned_tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "service_advisor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="service_advisor_tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="updated_tickets",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="VehicleModel",
            fields=[
                ("vehicle_id", models.AutoField(primary_key=True, serialize=False)),
                ("chassis_number", models.CharField(max_length=50, unique=True)),
                ("reg_no", models.CharField(max_length=20, unique=True)),
                ("make", models.CharField(max_length=50)),
                ("model", models.CharField(max_length=50)),
                ("year", models.PositiveIntegerField()),
                ("vin", models.CharField(max_length=17, unique=True)),
                ("colour", models.CharField(default="Unknown", max_length=50)),
                ("mileage", models.PositiveIntegerField()),
                (
                    "trans",
                    models.CharField(
                        choices=[("Auto", "Automatic"), ("Manual", "Manual")],
                        max_length=10,
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        blank=True, null=True, upload_to="vehicle_images/"
                    ),
                ),
                (
                    "customer_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vehicles",
                        to="accounts.customuserprofile",
                    ),
                ),
            ],
        ),
    ]
